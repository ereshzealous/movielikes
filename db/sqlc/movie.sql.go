// Code generated by sqlc. DO NOT EDIT.
// source: movie.sql

package db

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movie (
  name,
  production_company,
  year_released
) VALUES (
  $1, $2, $3
) RETURNING id, name, production_company, year_released, created_at
`

type CreateMovieParams struct {
	Name              string `json:"name"`
	ProductionCompany string `json:"production_company"`
	YearReleased      int32  `json:"year_released"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie, arg.Name, arg.ProductionCompany, arg.YearReleased)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductionCompany,
		&i.YearReleased,
		&i.CreatedAt,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one
SELECT id, name, production_company, year_released, created_at FROM movie WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductionCompany,
		&i.YearReleased,
		&i.CreatedAt,
	)
	return i, err
}

const getMoviesByReleasedYear = `-- name: GetMoviesByReleasedYear :many
SELECT id, name, production_company, year_released, created_at FROM movie WHERE year_released = $1 ORDER BY created_at DESC limit $2 offset $3
`

type GetMoviesByReleasedYearParams struct {
	YearReleased int32 `json:"year_released"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) GetMoviesByReleasedYear(ctx context.Context, arg GetMoviesByReleasedYearParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByReleasedYear, arg.YearReleased, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductionCompany,
			&i.YearReleased,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesFromProductionCompany = `-- name: GetMoviesFromProductionCompany :many
SELECT id, name, production_company, year_released, created_at FROM movie WHERE production_company = $1 ORDER BY year_released DESC limit $2 offset $3
`

type GetMoviesFromProductionCompanyParams struct {
	ProductionCompany string `json:"production_company"`
	Limit             int32  `json:"limit"`
	Offset            int32  `json:"offset"`
}

func (q *Queries) GetMoviesFromProductionCompany(ctx context.Context, arg GetMoviesFromProductionCompanyParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesFromProductionCompany, arg.ProductionCompany, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductionCompany,
			&i.YearReleased,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
