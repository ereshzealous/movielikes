// Code generated by sqlc. DO NOT EDIT.
// source: account_details.sql

package db

import (
	"context"
)

const createAccountDetails = `-- name: CreateAccountDetails :one
INSERT INTO account_details (
  user_name,
  balance
) VALUES (
  $1, $2
) RETURNING id, user_name, balance, created_at
`

type CreateAccountDetailsParams struct {
	UserName string `json:"user_name"`
	Balance  int64  `json:"balance"`
}

func (q *Queries) CreateAccountDetails(ctx context.Context, arg CreateAccountDetailsParams) (AccountDetail, error) {
	row := q.db.QueryRowContext(ctx, createAccountDetails, arg.UserName, arg.Balance)
	var i AccountDetail
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccountDetails = `-- name: DeleteAccountDetails :exec
DELETE FROM account_details
WHERE id = $1
`

func (q *Queries) DeleteAccountDetails(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountDetails, id)
	return err
}

const getAccountDetails = `-- name: GetAccountDetails :one
SELECT id, user_name, balance, created_at FROM account_details
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountDetails(ctx context.Context, id int64) (AccountDetail, error) {
	row := q.db.QueryRowContext(ctx, getAccountDetails, id)
	var i AccountDetail
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountDetailsForUpdate = `-- name: GetAccountDetailsForUpdate :one
SELECT id, user_name, balance, created_at FROM account_details
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountDetailsForUpdate(ctx context.Context, id int64) (AccountDetail, error) {
	row := q.db.QueryRowContext(ctx, getAccountDetailsForUpdate, id)
	var i AccountDetail
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const listAccountDetails = `-- name: ListAccountDetails :many
SELECT id, user_name, balance, created_at FROM account_details
WHERE user_name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAccountDetailsParams struct {
	UserName string `json:"user_name"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListAccountDetails(ctx context.Context, arg ListAccountDetailsParams) ([]AccountDetail, error) {
	rows, err := q.db.QueryContext(ctx, listAccountDetails, arg.UserName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountDetail{}
	for rows.Next() {
		var i AccountDetail
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Balance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE account_details
SET balance = balance + $1
WHERE id = $2
RETURNING id, user_name, balance, created_at
`

type UpdateAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (AccountDetail, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.Amount, arg.ID)
	var i AccountDetail
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountDetails = `-- name: UpdateAccountDetails :one
UPDATE account_details
SET balance = $2
WHERE id = $1
RETURNING id, user_name, balance, created_at
`

type UpdateAccountDetailsParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAccountDetails(ctx context.Context, arg UpdateAccountDetailsParams) (AccountDetail, error) {
	row := q.db.QueryRowContext(ctx, updateAccountDetails, arg.ID, arg.Balance)
	var i AccountDetail
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
